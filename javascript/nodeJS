- Non-Blocking I/O를 지원하기 때문에 비동기식 프로그래밍을 할 수 있다.
  때문에 I/O부하가 심한 대규모 서비스를 개발하기 적합하다.

- 자바스크립트의 표준라이브러리 프로젝트인 CommonJS의 스펙을 따르고 있다.

- 기존에는 각 연결에 대해 새로운 스레드를 생성하고 그에 따라 메모리를 할당하여 사용자
  요청을 처리했다면 노드에서는 각 연결이 하나의 이벤트로서 노드 엔진에서 처리된다

- 디스크, 네트워크, 프로세스를 통해 데이터를 받으려면 반드시 콜백을 사용한다

- 쉬운 네트워크 프로그래밍을 위해 TCP, DNS, HTTP같은 프로토콜을 사용한다

- 전역객체(global) : 자바스크립트에서의 window와같은 개념

- 모듈
  . 일반모듈 : 노드의 모듈 인터페이스를 통해 간단히 JS로 개발된 모듈
  . 네이티브모듈 : C/C++로 개발된 모듈.
    *같은 기능을 수행하는 모듈이라면 일반적으로 네이티브모듈이 더 나은 성능을 보임

  . 글로벌모듈 : 어디서든 사용 할 수 있도록 설치한 모듈
                -g 옵션을 통해 이용
  . 로컬모듈 : 해당 app에서만 사용하기 위해 설치한 모듈
